 Jump Game
class Solution {
public:
      bool canJump(vector<int>& nums) {
        ios_base::sync_with_stdio(false);
        cin.tie(0); cout.tie(0);
        int curJumpPow = nums[0], n = nums.size();
        
        for (int i = 1; i < n; i++) {
            if (curJumpPow < i) {
                return false;
            }
            curJumpPow = max(curJumpPow, i + nums[i]);
        }
        return true;
    }
};

JUMP GAME || 
class Solution {
public:
    int jump(vector<int>& nums) {
       int ans = 0;
       int end = 0;
       int farthest = 0;

    // Implicit BFS
       for (int i = 0; i < nums.size() - 1; ++i) {
          farthest = max(farthest, i + nums[i]);
          if (farthest >= nums.size() - 1) {
              ++ans;
              break;
            }
          if (i == end) {    // Visited all the items on the current level
             ++ans;           // Increment the level
              end = farthest;  // Make the queue size for the next level
            }
        }

        return ans; 
    }
};
