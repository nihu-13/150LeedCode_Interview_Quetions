Insert Delete GetRandom
class RandomizedSet {
public:
    RandomizedSet() {
        
    }
    
    bool insert(int val) {
        if(set.count(val)) return false;

        set.insert(val);
        return true;
        
    }
    
    bool remove(int val) {
        if(set.count(val)){
            set.erase(val);
            return true;
        }
        return false;
        
    }
    
    int getRandom() {
       auto p=set.begin();
       advance(p,random()%set.size());
       return *p;
        
    }
    unordered_set<int> set;
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
or

class RandomizedSet {
public:
    RandomizedSet() {
        [=](){
           ios_base::sync_with_stdio(false);
           cin.tie(nullptr);
           cout.tie(nullptr); 
        }();
    }
    
    bool insert(int val) {
        bool result = false;
        if(v.empty())
        {
            v.push_back(val);
            mp[val] = v.size()-1;
            result = true;
        }
        else
        {
            auto itr = mp.find(val);
            if(itr == mp.end())
            {
                v.push_back(val);
                mp[val] = v.size()-1;
                result = true;
            }
        }
        return result;
    }
    
    bool remove(int val) {
        bool result = false;
        if(!v.empty())
        {
            auto itr = mp.find(val);
            if(itr != mp.end())
            {
                result = true;
                v[itr->second] = v.back();
                v.pop_back();
                mp[v[itr->second]] = itr->second;
                mp.erase(val);
            }
        }
        return result;
    }
    
    int getRandom() {
        int result = 0;
        if(!v.empty())
        {
            int index = rand() % v.size();
            result = v[index];
        }
        return result;
    }
private:
    std::vector<int> v;
    unordered_map<int,int> mp;
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
